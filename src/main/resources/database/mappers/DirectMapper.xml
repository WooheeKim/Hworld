<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.hworld.base.dao.DirectDAO">
  
  	<sql id="search">
		<where>
			<if test="kind=='directName'">
				TITLE LIKE CONCAT('%',#{search},'%')
			</if>
			<if test="kind=='dircetContents'">
				CONTENTS LIKE CONCAT('%',#{search},'%')
			</if>
			<if test="kind=='slicedCode'">
				CONTENTS LIKE CONCAT('%',#{search},'%')
			</if>
		</where>
	</sql>
  
  	<select id="getList" resultType="DirectVO" parameterType="Pager">
    SELECT SUBSTRING(D.directCode, -5) AS slicedCode,
        D.*,
        MIN(D.DIRECTPRICE) AS INITPRICE,
        AVG(R.RATE) AS rate
	    FROM DIRECT D
	    LEFT JOIN ORDERDIRECT OD ON SUBSTRING(D.directCode, -5) = SUBSTRING(OD.DIRECTCODE, -5)
	    LEFT JOIN REVIEW R ON OD.ORDERNUM = R.ORDERNUM
	   	WHERE SUBSTRING(D.directCode, 1, 3) = 'P01'
	    GROUP BY SUBSTRING(D.DIRECTCODE, -5), D.DIRECTNAME, D.DIRECTCONTENTS
	    <choose>
	        <when test="sortType == 'priceHigh'">
	            ORDER BY INITPRICE DESC
	        </when>
	        <when test="sortType == 'priceLow'">
	            ORDER BY INITPRICE ASC
	        </when>
	        <otherwise>
	            ORDER BY D.UPLOADDATE DESC
	        </otherwise>
	    </choose>
	    LIMIT #{startRow}, #{perPage}
	</select>
	
  	<select id="getAccList" resultType="DirectVO" parameterType="Pager">
    SELECT SUBSTRING(D.directCode, -5) AS slicedCode,
	    D.*,
	    MIN(D.DIRECTPRICE) AS INITPRICE,
	    AVG(R.RATE) AS rate
	    FROM DIRECT D
	    LEFT JOIN ORDERDIRECT OD ON SUBSTRING(D.directCode, -5) = SUBSTRING(OD.DIRECTCODE, -5)
	    LEFT JOIN REVIEW R ON OD.ORDERNUM = R.ORDERNUM
	    WHERE NOT SUBSTRING(D.directCode, 1, 3) = 'P01'
	    GROUP BY SUBSTRING(D.directCode, -5), D.DIRECTNAME, D.DIRECTCONTENTS
	    <choose>
	        <when test="sortType == 'priceHigh'">
	            ORDER BY INITPRICE DESC
	        </when>
	        <when test="sortType == 'priceLow'">
	            ORDER BY INITPRICE ASC
	        </when>
	        <otherwise>
	            ORDER BY D.UPLOADDATE DESC
	        </otherwise>
	    </choose>
	    LIMIT #{startRow}, #{perPage}
	</select>



	<!-- 상품 개수 -->  	
	<select id="getTotalCount" parameterType="Pager" resultType="Long">
		SELECT COUNT(DIRECTCODE) FROM DIRECT
		<include refid="search"></include>
	</select> 
	
	<!-- 상품 디테일 페이지 상품 하나 다중 옵션 리스트-->
	<select id="getDetail" parameterType="DirectVO" resultType="DirectVO"> 
	   SELECT D.*, CC.VALUE AS value, RIGHT(D.DIRECTCODE, 5) AS slicedCode
		FROM DIRECT D
		INNER JOIN COMMONCODE CC ON D.BRANDCODE = CC.CODE
		WHERE RIGHT(D.DIRECTCODE, 5) = #{slicedCode}
		
		ORDER BY D.DIRECTPRICE ASC
	</select>
	


	<!-- 상품 등록 --> 	
	<insert id="setInsert" parameterType="DirectVO">
		INSERT INTO DIRECT(DIRECTCODE, DIRECTNAME, DIRECTCONTENTS, DIRECTPRICE, DIRECTSTOCK, CATEGORYCODE, BRANDCODE, COLORCODE, SAVECAPACITY, UPLOADDATE)
		VALUES (#{directCode}, #{directName}, #{directContents}, #{directPrice}, #{directStock}, #{categoryCode}, #{brandCode}, #{colorCode}, #{saveCapacity}, now())

	</insert>
	 	
  	<!-- 상품 삭제 -->
	<delete id="setDelete" parameterType="DirectVO">
	  DELETE FROM DIRECT
	  WHERE directCode LIKE CONCAT('%', #{slicedCode}, '%')
	</delete>
	
	<!-- 상품 수정 -->
	<update id="setUpdate" parameterType="DirectVO">
		UPDATE DIRECT
		SET DIRECTNAME = #{directName}, DIRECTCONTENTS = #{directContents}, DIRECTPRICE = #{directPrice}, DIRECTSTOCK = #{directStock}, CATEGORYCODE = #{categoryCode}, BRANDCODE = #{brandCode}, COLORCODE = #{colorCode}, SAVECAPACITY = #{saveCapacity}
		WHERE RIGHT(DIRECTCODE, 5) = #{slicedCode}
	</update>
	<!-- 총 리뷰 가져오기 -->
	<select id="getReview" resultType="ReviewVO" parameterType="DirectVO">
	 	SELECT R.*, M.EMAIL AS email, D.DIRECTNAME, D.DIRECTCODE, SUBSTRING(D.DIRECTCODE, -5) AS slicedCode
		FROM REVIEW R
		LEFT JOIN ORDERDIRECT OD ON OD.ORDERNUM = R.ORDERNUM
		LEFT JOIN DIRECT D ON D.DIRECTCODE =OD.DIRECTCODE
		LEFT JOIN MEMBER M ON R.MEMBERNUM = M.MEMBERNUM
		HAVING slicedCode = #{slicedCode}
		ORDER BY R.REGDATE DESC;
	</select>

	<!-- 리뷰 총 개수 가져오기 -->
	<select id="getReviewCount" parameterType="DirectVO" resultType="Long">
		SELECT COUNT(R.NUM), SUBSTRING(D.DIRECTCODE,-5) AS slicedCode 
		FROM REVIEW R
		LEFT JOIN ORDERDIRECT OD ON OD.ORDERNUM = R.ORDERNUM
		INNER JOIN DIRECT D ON D.DIRECTCODE = OD.DIRECTCODE
		WHERE SUBSTRING(D.DIRECTCODE,-5) =#{sliecdCode}
	</select> 
	<!-- 리뷰 작성 -->
	<insert id="setReviewAdd" parameterType="ReviewVO">
		INSERT INTO REVIEW (MEMBERNUM, ORDERNUM, CONTENTS, RATE, REGDATE)
		VALUES (#{memberNum}, #{orderNum}, #{contents}, #{rate}, now())
	</insert> 
	<!-- 리뷰 수정 -->
	<update id="setReviewUpdate" parameterType="ReviewVO">
		UPDATE REVIEW
		SET CONTENTS=#{contents}, RATE=#{rate}
		WHERE NUM=#{num}
	</update>
	
	<!-- 리뷰 삭제 -->
	<delete id="setReviewDelete" parameterType="ReviewVO">
		DELETE FROM REVIEW
		WHERE NUM=#{num}
	</delete>
	
	<!-- 상품문의 -->
	<select id="getDirectQna" resultType="QnaVO" parameterType="QnaVO">
		SELECT Q.*, M.EMAIL AS email FROM QNA Q
		INNER JOIN MEMBER M ON M.MEMBERNUM =Q.MEMBERNUM 
		WHERE SLICEDCODE =#{slicedCode}
	</select>
	
	<!-- 상품문의 추가 -->
	<insert id="setQnaAdd" parameterType="QnaVO">
	INSERT INTO QNA (MEMBERNUM, SLICEDCODE, ORDERNUM, SERIALNUM, TITLE, CONTENTS, REPLY, REGDATE, STATE, CATEGORYCODE, FILEPATH, REPLYDATE)
	VALUES(#{memberNum}, #{slicedCode} ,NULL, NULL, NULL, #{contents}, NULL, now(), 0, '03', NULL, NULL);
	</insert>
	
	<!-- 상품문의 답글 업데이트 -->
	<update id="setReplyAdd" parameterType="QnaVO">
		UPDATE QNA
		SET REPLY=#{reply}, REPLYDATE=now(), STATE=1
		WHERE NUM=#{num}
	</update>
	
	
	<!-- Plan -->
	<!-- existPlanList -->
	<select id="getExistPlanList" resultType="PlanVO">
		SELECT DISTINCT C.NOTE
		FROM PLAN P
		INNER JOIN COMMONCODE C ON SUBSTRING(P.PLANNUM, 1, 1) = C.TYPE
	</select>
	
	<!-- planList + disPercent -->
	<select id="getPlanList" resultType="PlanVO">
		SELECT P.PLANNUM, P.PLANNAME, P.PLANPRICE, P.DATACAPACITY, P.CATEGORYCODE, P.PLANEXPLAIN, P.PLANEXPLAINSM, D.DISPERCENT 
		FROM PLAN P
		LEFT JOIN DISCODE D
		ON(P.DISCODE=D.DISCODE)
		WHERE PLANNUM LIKE 'G%' OR PLANNUM LIKE 'S%' OR PLANNUM LIKE 'T%' OR PLANNUM LIKE 'Z%' OR PLANNUM LIKE 'W%' OR PLANNUM LIKE 'H%'
	</select>
	
	<!-- 선택한 요금제 -->
	<select id="getSelectedPlan" resultType="PlanVO" parameterType="PlanVO">
	SELECT * FROM PLAN
	WHERE PLANNUM = #{planNum}
	</select>
	
  </mapper>